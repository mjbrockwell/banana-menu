// Simple menu script for Roam Research
(function() {
  // Super simple CSS
  const styles = document.createElement('style');
  styles.innerHTML = `
    .simple-button {
      position: fixed;
      top: 10px;
      right: 10px;
      background: #5c7080;
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      z-index: 9999;
      font-size: 14px;
    }
    .mini-menu {
      position: absolute;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      padding: 5px;
      z-index: 9999;
    }
    .mini-menu button {
      display: block;
      width: 100%;
      padding: 5px 10px;
      margin: 3px 0;
      border: 1px solid #ddd;
      background: #f8f8f8;
      border-radius: 3px;
      cursor: pointer;
      text-align: left;
    }
    .mini-menu button:hover {
      background: #eaeaea;
    }
  `;
  document.head.appendChild(styles);

  // Create trigger button
  const triggerButton = document.createElement('button');
  triggerButton.className = 'simple-button';
  triggerButton.textContent = 'Simple Menu';
  document.body.appendChild(triggerButton);

  // Create mini menu
  const menu = document.createElement('div');
  menu.className = 'mini-menu';
  menu.style.display = 'none';
  menu.innerHTML = `
    <button id="cake-btn">cake</button>
    <button id="ice-btn">ice cream</button>
  `;
  document.body.appendChild(menu);

  // Show menu at cursor or button
  function showMenuAtPosition(x, y) {
    menu.style.left = `${x}px`;
    menu.style.top = `${y}px`;
    menu.style.display = 'block';
  }

  // Insert text at cursor
  function insertText(text) {
    // Find an active contenteditable element
    const activeElement = document.activeElement;
    if (activeElement && activeElement.isContentEditable) {
      // Insert at current selection
      const selection = window.getSelection();
      if (selection.rangeCount) {
        const range = selection.getRangeAt(0);
        range.deleteContents();
        range.insertNode(document.createTextNode(text));
      }
    } else {
      // If no active element, find any editable block
      const editableElements = document.querySelectorAll('[contenteditable=true]');
      if (editableElements.length > 0) {
        // Focus the first visible one
        for (const el of editableElements) {
          if (el.offsetParent !== null) { // Element is visible
            el.focus();
            // Insert at the end
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(el);
            range.collapse(false); // Collapse to end
            selection.removeAllRanges();
            selection.addRange(range);
            
            // Now insert the text
            range.insertNode(document.createTextNode(text));
            break;
          }
        }
      } else {
        alert(`No editable element found. Text to insert: ${text}`);
      }
    }
  }

  // Handle button click
  triggerButton.addEventListener('click', () => {
    const rect = triggerButton.getBoundingClientRect();
    showMenuAtPosition(rect.left, rect.bottom + window.scrollY);
  });
  
  // Setup menu buttons
  document.addEventListener('click', (e) => {
    if (e.target.id === 'cake-btn') {
      insertText('cake');
      menu.style.display = 'none';
    } else if (e.target.id === 'ice-btn') {
      insertText('ice cream');
      menu.style.display = 'none';
    }
  });
  
  // Close menu when clicking elsewhere
  document.addEventListener('mousedown', (e) => {
    if (menu.style.display === 'block' && 
        !menu.contains(e.target) && 
        e.target !== triggerButton) {
      menu.style.display = 'none';
    }
  });
  
  console.log('Button-based simple menu initialized');
})();
